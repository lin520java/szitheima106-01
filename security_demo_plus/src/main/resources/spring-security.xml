<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
<!--【注意】 所有的url必须以/开头，否则启动报错-->
<!-- 静态资源过滤   security 不处理，放行，匿名访问-->
    <security:http pattern="/login.html" security="none"/>
    <security:http pattern="/fail.html" security="none"/>

    <security:http auto-config="true" use-expressions="true">
        <!--
            access="hasRole('ROLE_ADMIN') <=> access=ROLE_ADMIN
        -->
        <!--<security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"/>-->
        <!--只要认证通过就可以访问-->
        <security:intercept-url pattern="/index.html"  access="isAuthenticated()" />
        <security:intercept-url pattern="/a.html"  access="isAuthenticated()" />

        <!--拥有add权限就可以访问b.html页面-->
        <security:intercept-url pattern="/b.html"  access="hasAuthority('add')" />

        <!--拥有ROLE_ADMIN角色就可以访问c.html页面，
            注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/c.html"  access="hasRole('ADMIN')" />

        <!--拥有ROLE_ADMIN角色就可以访问d.html页面-->
        <security:intercept-url pattern="/d.html"  access="hasRole('ABC')" />
    <!--  指定登陆页面
       login-page: 登陆页面
       username-parameter: 登陆提交时的用户名参数名 UsernamePasswordAuthenticationFilter request.getParameter(usernameParameter);
       password-parameter: 登陆提交时的密码的参数名  request.getParameter(passwordParameter);
       login-processing-url: 指定哪个url请求是做登陆认证的
       authentication-failure-url: 登陆失败后跳转的url
       default-target-url: 默认登陆成功后跳转的url,登陆成功后回到原来的页面
       always-use-default-target: true, 登陆成功后一定跳转到default-target-url
      -->
        <security:form-login login-page="/login.html"
                             username-parameter="abc"
                             password-parameter="bbb"
                             login-processing-url="/login"
                             authentication-failure-url="/fail.html"
                             default-target-url="/index.html"
                             always-use-default-target="true"
        />
    <!--  关闭跨域访问限制  -->
        <security:csrf disabled="true"/>

    <!--  退出配置
      logout-success-url: 退出登陆成功后跳转的url
      logout-url: 指定退出的请求路径，你访问了这个url，我就做退出处理
      invalidate-session: 会话失效
      -->
        <security:logout logout-success-url="/login.html" logout-url="/logout" invalidate-session="true"/>
    </security:http>

    <!--权限控制的注解支持-->
    <security:global-method-security pre-post-annotations="enabled"/>

    <security:authentication-manager>
        <!--user-service-ref: ref引入bean对象-->
        <security:authentication-provider user-service-ref="userService">
            <!--指定密码校验器-->
            <security:password-encoder ref="encoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <bean id="userService" class="com.itheima.security.UserService"/>
    <!--注册密码加密器-->
    <bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <context:component-scan base-package="com.itheima.controller"/>
    <mvc:annotation-driven/>
</beans>